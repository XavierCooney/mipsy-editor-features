{
  "suggestions": [
    {
      "label": ".text",
      "type": "directive"
    },
    {
      "label": ".data",
      "type": "directive"
    },
    {
      "label": ".ktext",
      "type": "directive"
    },
    {
      "label": ".kdata",
      "type": "directive"
    },
    {
      "label": ".ascii",
      "type": "directive"
    },
    {
      "label": ".asciiz",
      "type": "directive"
    },
    {
      "label": ".byte",
      "type": "directive"
    },
    {
      "label": ".half",
      "type": "directive"
    },
    {
      "label": ".word",
      "type": "directive"
    },
    {
      "label": ".float",
      "type": "directive"
    },
    {
      "label": ".double",
      "type": "directive"
    },
    {
      "label": ".space",
      "type": "directive"
    },
    {
      "label": ".align",
      "type": "directive"
    },
    {
      "label": ".globl",
      "type": "directive"
    },
    {
      "label": "$zero",
      "type": "register",
      "sort_data": "00"
    },
    {
      "label": "$at",
      "type": "register",
      "sort_data": "01"
    },
    {
      "label": "$v0",
      "type": "register",
      "sort_data": "02"
    },
    {
      "label": "$v1",
      "type": "register",
      "sort_data": "03"
    },
    {
      "label": "$a0",
      "type": "register",
      "sort_data": "04"
    },
    {
      "label": "$a1",
      "type": "register",
      "sort_data": "05"
    },
    {
      "label": "$a2",
      "type": "register",
      "sort_data": "06"
    },
    {
      "label": "$a3",
      "type": "register",
      "sort_data": "07"
    },
    {
      "label": "$t0",
      "type": "register",
      "sort_data": "08"
    },
    {
      "label": "$t1",
      "type": "register",
      "sort_data": "09"
    },
    {
      "label": "$t2",
      "type": "register",
      "sort_data": "10"
    },
    {
      "label": "$t3",
      "type": "register",
      "sort_data": "11"
    },
    {
      "label": "$t4",
      "type": "register",
      "sort_data": "12"
    },
    {
      "label": "$t5",
      "type": "register",
      "sort_data": "13"
    },
    {
      "label": "$t6",
      "type": "register",
      "sort_data": "14"
    },
    {
      "label": "$t7",
      "type": "register",
      "sort_data": "15"
    },
    {
      "label": "$s0",
      "type": "register",
      "sort_data": "16"
    },
    {
      "label": "$s1",
      "type": "register",
      "sort_data": "17"
    },
    {
      "label": "$s2",
      "type": "register",
      "sort_data": "18"
    },
    {
      "label": "$s3",
      "type": "register",
      "sort_data": "19"
    },
    {
      "label": "$s4",
      "type": "register",
      "sort_data": "20"
    },
    {
      "label": "$s5",
      "type": "register",
      "sort_data": "21"
    },
    {
      "label": "$s6",
      "type": "register",
      "sort_data": "22"
    },
    {
      "label": "$s7",
      "type": "register",
      "sort_data": "23"
    },
    {
      "label": "$t8",
      "type": "register",
      "sort_data": "24"
    },
    {
      "label": "$t9",
      "type": "register",
      "sort_data": "25"
    },
    {
      "label": "$k0",
      "type": "register",
      "sort_data": "26"
    },
    {
      "label": "$k1",
      "type": "register",
      "sort_data": "27"
    },
    {
      "label": "$gp",
      "type": "register",
      "sort_data": "28"
    },
    {
      "label": "$sp",
      "type": "register",
      "sort_data": "29"
    },
    {
      "label": "$fp",
      "type": "register",
      "sort_data": "30"
    },
    {
      "label": "$ra",
      "type": "register",
      "sort_data": "31"
    },
    {
      "label": "sll",
      "type": "instruction",
      "docs": "Shifts the value in $Rt left by Sa logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "srl",
      "type": "instruction",
      "docs": "Shifts the value in $Rt right by Sa logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "rotr",
      "type": "instruction",
      "docs": "Rotates the value in $Rt right by Sa logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "sra",
      "type": "instruction",
      "docs": "Shifts the value in $Rt right by Sa arithmetically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "sllv",
      "type": "instruction",
      "docs": "Shifts the value in $Rt left by the value in $Rs logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "srlv",
      "type": "instruction",
      "docs": "Shifts the value in $Rt right by the value in $Rs logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "rotrv",
      "type": "instruction",
      "docs": "Rotates the value in $Rt right by the value in $Rs logically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "srav",
      "type": "instruction",
      "docs": "Shifts the value in $Rt right by the value in $Rs arithmetically, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "jr",
      "type": "instruction",
      "docs": "Jumps to the address stored in the register $Rs",
      "autoIndent": true
    },
    {
      "label": "jalr",
      "type": "instruction",
      "docs": "Jump-and-links to the address stored in the register $Rs, storing the return address in $Rd ($31 if not specified)",
      "autoIndent": true
    },
    {
      "label": "movz",
      "type": "instruction",
      "docs": "Move Conditional on Zero",
      "autoIndent": true
    },
    {
      "label": "movn",
      "type": "instruction",
      "docs": "Move Conditional on Not Zero",
      "autoIndent": true
    },
    {
      "label": "syscall",
      "type": "instruction",
      "docs": "Causes a system-call interrupt",
      "autoIndent": false
    },
    {
      "label": "break",
      "type": "instruction",
      "docs": "Causes a break interrupt",
      "autoIndent": false
    },
    {
      "label": "mfhi",
      "type": "instruction",
      "docs": "Copies the value from the HI register to $Rd",
      "autoIndent": true
    },
    {
      "label": "clz",
      "type": "instruction",
      "docs": "Count leading zeroes of $Rs, store in $Rd",
      "autoIndent": true
    },
    {
      "label": "mthi",
      "type": "instruction",
      "docs": "Copies the value from $Rs to the HI register",
      "autoIndent": true
    },
    {
      "label": "clo",
      "type": "instruction",
      "docs": "Count leading ones of $Rs, store in $Rd",
      "autoIndent": true
    },
    {
      "label": "mflo",
      "type": "instruction",
      "docs": "Copies the value from the LO register to $Rd",
      "autoIndent": true
    },
    {
      "label": "mtlo",
      "type": "instruction",
      "docs": "Copies the value from $Rs to the LO register",
      "autoIndent": true
    },
    {
      "label": "mult",
      "type": "instruction",
      "docs": "Multiplies the values in $Rs and $Rt, storing the result in the HI and LO registers",
      "autoIndent": true
    },
    {
      "label": "multu",
      "type": "instruction",
      "docs": "Multiplies the values in $Rs and $Rt, storing the result in the HI and LO registers, unsigned",
      "autoIndent": true
    },
    {
      "label": "div",
      "type": "instruction",
      "docs": "Divides the values in $Rs and $Rt, storing the $Rs / $Rt in HI, and $Rs % $Rt in LO",
      "autoIndent": true
    },
    {
      "label": "divu",
      "type": "instruction",
      "docs": "Divides the values in $Rs and $Rt, storing the $Rs / $Rt in HI, and $Rs % $Rt in LO, unsigned",
      "autoIndent": true
    },
    {
      "label": "tge",
      "type": "instruction",
      "docs": "Trap if Greater or Equal",
      "autoIndent": true
    },
    {
      "label": "tgeu",
      "type": "instruction",
      "docs": "Trap if Greater or Equal Unsigned",
      "autoIndent": true
    },
    {
      "label": "tlt",
      "type": "instruction",
      "docs": "Trap if Less Than",
      "autoIndent": true
    },
    {
      "label": "tltu",
      "type": "instruction",
      "docs": "Trap if Less Than Unsigned",
      "autoIndent": true
    },
    {
      "label": "teq",
      "type": "instruction",
      "docs": "Trap if Equal",
      "autoIndent": true
    },
    {
      "label": "tne",
      "type": "instruction",
      "docs": "Trap if Not Equal",
      "autoIndent": true
    },
    {
      "label": "madd",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "maddu",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "mul",
      "type": "instruction",
      "docs": "Multiplies the values in $Rs and $Rt, storing the result in $Rd",
      "autoIndent": true
    },
    {
      "label": "msub",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "msubu",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "wsbh",
      "type": "instruction",
      "docs": "Word Swap Bytes Within Halfwords",
      "autoIndent": true
    },
    {
      "label": "seb",
      "type": "instruction",
      "docs": "Sign-Extend Byte",
      "autoIndent": true
    },
    {
      "label": "seh",
      "type": "instruction",
      "docs": "Sign-Extend Halfword",
      "autoIndent": true
    },
    {
      "label": "add",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "addu",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "sub",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "subu",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "and",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "or",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "xor",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "nor",
      "type": "instruction",
      "docs": "todo",
      "autoIndent": true
    },
    {
      "label": "slt",
      "type": "instruction",
      "docs": "Set $Rd to 1 if $Rs < $Rt, otherwise set $Rd to 0, unsigned",
      "autoIndent": true
    },
    {
      "label": "sltu",
      "type": "instruction",
      "docs": "Set $Rd to 1 if $Rs < $Rt, otherwise set $Rd to 0, unsigned",
      "autoIndent": true
    },
    {
      "label": "bltz",
      "type": "instruction",
      "docs": "Branch to the immediate address if the value in $Rs < 0",
      "autoIndent": true
    },
    {
      "label": "bgez",
      "type": "instruction",
      "docs": "Branch to the immediate address if the value in $Rs >= 0",
      "autoIndent": true
    },
    {
      "label": "tgei",
      "type": "instruction",
      "docs": "Trap if Greater or Equal Immediate",
      "autoIndent": true
    },
    {
      "label": "tgeiu",
      "type": "instruction",
      "docs": "Trap if Greater or Equal Immediate Unsigned",
      "autoIndent": true
    },
    {
      "label": "tlti",
      "type": "instruction",
      "docs": "Trap if Less Than Immediate",
      "autoIndent": true
    },
    {
      "label": "tltiu",
      "type": "instruction",
      "docs": "Trap if Less Than Immediate Unsigned",
      "autoIndent": true
    },
    {
      "label": "teqi",
      "type": "instruction",
      "docs": "Trap if Equal Immediate",
      "autoIndent": true
    },
    {
      "label": "tnei",
      "type": "instruction",
      "docs": "Trap if Not Equal Immediate",
      "autoIndent": true
    },
    {
      "label": "bltzal",
      "type": "instruction",
      "docs": "Branch-and-link to the immediate address if the value in $Rs < 0",
      "autoIndent": true
    },
    {
      "label": "bgezal",
      "type": "instruction",
      "docs": "Branch-and-link to the immediate address if the value in $Rs >= 0",
      "autoIndent": true
    },
    {
      "label": "beq",
      "type": "instruction",
      "docs": "Branch to the immediate address if the values in $Rs == $Rt",
      "autoIndent": true
    },
    {
      "label": "bne",
      "type": "instruction",
      "docs": "Branch to the immediate address if the values in $Rs != $Rt",
      "autoIndent": true
    },
    {
      "label": "blez",
      "type": "instruction",
      "docs": "Branch to the immediate address if the value in $Rs <= 0",
      "autoIndent": true
    },
    {
      "label": "bgtz",
      "type": "instruction",
      "docs": "Branch to the immediate address if the value in $Rs > 0",
      "autoIndent": true
    },
    {
      "label": "addi",
      "type": "instruction",
      "docs": "Adds an immediate value to the value in $Rs, stores result in $Rt",
      "autoIndent": true
    },
    {
      "label": "addiu",
      "type": "instruction",
      "docs": "Adds an immediate value to the value in $Rs, stores result in $Rt, unsigned",
      "autoIndent": true
    },
    {
      "label": "slti",
      "type": "instruction",
      "docs": "Sets $Rt to 1 if the value in $Rs is less than the immediate value, otherwise sets $Rt to 0",
      "autoIndent": true
    },
    {
      "label": "sltiu",
      "type": "instruction",
      "docs": "Sets $Rt to 1 if the value in $Rs is less than the immediate value, otherwise sets $Rt to 0, unsigned",
      "autoIndent": true
    },
    {
      "label": "andi",
      "type": "instruction",
      "docs": "Bitwise and of the value in $Rs and the immediate value, stores the result in $Rt",
      "autoIndent": true
    },
    {
      "label": "ori",
      "type": "instruction",
      "docs": "Bitwise or of the value in $Rs and the immediate value, stores the result in $Rt",
      "autoIndent": true
    },
    {
      "label": "xori",
      "type": "instruction",
      "docs": "Bitwise xor of the value in $Rs and the immediate value, stores the result in $Rt",
      "autoIndent": true
    },
    {
      "label": "lui",
      "type": "instruction",
      "docs": "Load the immediate value into the upper 16 bits of $Rt",
      "autoIndent": true
    },
    {
      "label": "lb",
      "type": "instruction",
      "docs": "Load one byte at the immediate address + $Rs into $Rt",
      "autoIndent": true
    },
    {
      "label": "lh",
      "type": "instruction",
      "docs": "Load two bytes at the immediate address + $Rs into $Rt",
      "autoIndent": true
    },
    {
      "label": "lwl",
      "type": "instruction",
      "docs": "Load Word Left",
      "autoIndent": true
    },
    {
      "label": "lw",
      "type": "instruction",
      "docs": "Load four bytes at the immediate address + $Rs into $Rt",
      "autoIndent": true
    },
    {
      "label": "lbu",
      "type": "instruction",
      "docs": "Load one byte at the immediate address + $Rs into $Rt, don't sign extend",
      "autoIndent": true
    },
    {
      "label": "lhu",
      "type": "instruction",
      "docs": "Load two bytes at the immediate address + $Rs into $Rt, don't sign extend",
      "autoIndent": true
    },
    {
      "label": "lwr",
      "type": "instruction",
      "docs": "Load Word Right",
      "autoIndent": true
    },
    {
      "label": "sb",
      "type": "instruction",
      "docs": "Store one byte from $Rt into the immediate address + $Rs",
      "autoIndent": true
    },
    {
      "label": "sh",
      "type": "instruction",
      "docs": "Store two bytes from $Rt into the immediate address + $Rs",
      "autoIndent": true
    },
    {
      "label": "sw",
      "type": "instruction",
      "docs": "Store four bytes from $Rt into the immediate address + $Rs",
      "autoIndent": true
    },
    {
      "label": "lwc1",
      "type": "instruction",
      "docs": "Load a word from the immediate address + $Rs into $Rt (floating point register)",
      "autoIndent": true
    },
    {
      "label": "swc1",
      "type": "instruction",
      "docs": "Store a word from $Rt (floating point register) into the immediate address + $Rs",
      "autoIndent": true
    },
    {
      "label": "j",
      "type": "instruction",
      "docs": "Jump to the immediate address",
      "autoIndent": true
    },
    {
      "label": "jal",
      "type": "instruction",
      "docs": "Jump-and-link to the immediate address",
      "autoIndent": true
    },
    {
      "label": "incr",
      "type": "instruction",
      "docs": "Increment the value of $Rs",
      "autoIndent": true
    },
    {
      "label": "decr",
      "type": "instruction",
      "docs": "Decrement the value of $Rs",
      "autoIndent": true
    },
    {
      "label": "sle",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sleu",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sgt",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sgtu",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sge",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sgeu",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "seq",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "sne",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "li",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "la",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "nop",
      "type": "instruction",
      "docs": "No-Operation - doesn't do anything",
      "autoIndent": false
    },
    {
      "label": "move",
      "type": "instruction",
      "docs": "Copy the value from $Rs into $Rd",
      "autoIndent": true
    },
    {
      "label": "copy",
      "type": "instruction",
      "docs": "Copy the value from $Rs into $Rd",
      "autoIndent": true
    },
    {
      "label": "neg",
      "type": "instruction",
      "docs": "Flip all the bits in $Rs, store result in $Rd",
      "autoIndent": true
    },
    {
      "label": "negu",
      "type": "instruction",
      "docs": "Flip all the bits in $Rs, store result in $Rd",
      "autoIndent": true
    },
    {
      "label": "not",
      "type": "instruction",
      "docs": "$Rd = ! $Rs",
      "autoIndent": true
    },
    {
      "label": "rem",
      "type": "instruction",
      "docs": "Store the remainder of $Rs / $Rt into $Rd",
      "autoIndent": true
    },
    {
      "label": "remu",
      "type": "instruction",
      "docs": "Store the remainder of $Rs / $Rt (unsigned) into $Rd",
      "autoIndent": true
    },
    {
      "label": "mod",
      "type": "instruction",
      "docs": "Store the remainder of $Rs / $Rt into $Rd",
      "autoIndent": true
    },
    {
      "label": "modu",
      "type": "instruction",
      "docs": "Store the remainder of $Rs / $Rt (unsigned) into $Rd",
      "autoIndent": true
    },
    {
      "label": "abs",
      "type": "instruction",
      "docs": "$Rs = |$Rt|",
      "autoIndent": true
    },
    {
      "label": "push",
      "type": "instruction",
      "docs": "Push $Rs to the top of the stack",
      "autoIndent": true
    },
    {
      "label": "pop",
      "type": "instruction",
      "docs": "Pop the top of the stack into $Rd",
      "autoIndent": true
    },
    {
      "label": "begin",
      "type": "instruction",
      "docs": "Begin a new stack frame",
      "autoIndent": false
    },
    {
      "label": "end",
      "type": "instruction",
      "docs": "End the current stack frame",
      "autoIndent": false
    },
    {
      "label": "rol",
      "type": "instruction",
      "docs": "Rotate Left",
      "autoIndent": true
    },
    {
      "label": "ror",
      "type": "instruction",
      "docs": "Rotate Right",
      "autoIndent": true
    },
    {
      "label": "zeb",
      "type": "instruction",
      "docs": "Zero-Extend Byte",
      "autoIndent": true
    },
    {
      "label": "zeh",
      "type": "instruction",
      "docs": "Zero-Extend Half",
      "autoIndent": true
    },
    {
      "label": "b",
      "type": "instruction",
      "docs": "Branch unconditionally",
      "autoIndent": true
    },
    {
      "label": "bal",
      "type": "instruction",
      "docs": "",
      "autoIndent": true
    },
    {
      "label": "beqz",
      "type": "instruction",
      "docs": "Branch if $Rs == 0",
      "autoIndent": true
    },
    {
      "label": "bnez",
      "type": "instruction",
      "docs": "Branch if $Rs != 0",
      "autoIndent": true
    },
    {
      "label": "bge",
      "type": "instruction",
      "docs": "Branch if $Rs >= $Rt",
      "autoIndent": true
    },
    {
      "label": "bgeu",
      "type": "instruction",
      "docs": "Branch if $Rs >= $Rt unsigned",
      "autoIndent": true
    },
    {
      "label": "blt",
      "type": "instruction",
      "docs": "Branch if $Rs < $Rt",
      "autoIndent": true
    },
    {
      "label": "bltu",
      "type": "instruction",
      "docs": "Branch if $Rs < $Rt unsigned",
      "autoIndent": true
    },
    {
      "label": "ble",
      "type": "instruction",
      "docs": "Branch if $Rs <= $Rt",
      "autoIndent": true
    },
    {
      "label": "bleu",
      "type": "instruction",
      "docs": "Branch if $Rs <= $Rt",
      "autoIndent": true
    },
    {
      "label": "bgt",
      "type": "instruction",
      "docs": "Branch if $Rs > $Rt",
      "autoIndent": true
    },
    {
      "label": "bgtu",
      "type": "instruction",
      "docs": "Branch if $Rs > $Rt unsigned",
      "autoIndent": true
    },
    {
      "label": "1",
      "type": "syscall_num",
      "docs": "print int",
      "syscall_common": true,
      "sort_data": "01"
    },
    {
      "label": "2",
      "type": "syscall_num",
      "docs": "print float",
      "syscall_common": false,
      "sort_data": "02"
    },
    {
      "label": "3",
      "type": "syscall_num",
      "docs": "print double",
      "syscall_common": false,
      "sort_data": "03"
    },
    {
      "label": "4",
      "type": "syscall_num",
      "docs": "print string",
      "syscall_common": true,
      "sort_data": "04"
    },
    {
      "label": "5",
      "type": "syscall_num",
      "docs": "read int",
      "syscall_common": true,
      "sort_data": "05"
    },
    {
      "label": "6",
      "type": "syscall_num",
      "docs": "read float",
      "syscall_common": false,
      "sort_data": "06"
    },
    {
      "label": "7",
      "type": "syscall_num",
      "docs": "read double",
      "syscall_common": false,
      "sort_data": "07"
    },
    {
      "label": "8",
      "type": "syscall_num",
      "docs": "read string",
      "syscall_common": false,
      "sort_data": "08"
    },
    {
      "label": "9",
      "type": "syscall_num",
      "docs": "sbrk",
      "syscall_common": false,
      "sort_data": "09"
    },
    {
      "label": "10",
      "type": "syscall_num",
      "docs": "exit",
      "syscall_common": false,
      "sort_data": "10"
    },
    {
      "label": "11",
      "type": "syscall_num",
      "docs": "print character",
      "syscall_common": true,
      "sort_data": "11"
    },
    {
      "label": "12",
      "type": "syscall_num",
      "docs": "read character",
      "syscall_common": true,
      "sort_data": "12"
    },
    {
      "label": "13",
      "type": "syscall_num",
      "docs": "open file",
      "syscall_common": false,
      "sort_data": "13"
    },
    {
      "label": "14",
      "type": "syscall_num",
      "docs": "read file",
      "syscall_common": false,
      "sort_data": "14"
    },
    {
      "label": "15",
      "type": "syscall_num",
      "docs": "write file",
      "syscall_common": false,
      "sort_data": "15"
    },
    {
      "label": "16",
      "type": "syscall_num",
      "docs": "close file",
      "syscall_common": false,
      "sort_data": "16"
    },
    {
      "label": "17",
      "type": "syscall_num",
      "docs": "exit2",
      "syscall_common": false,
      "sort_data": "17"
    }
  ]
}